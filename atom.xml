<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Ethan&#x27;s Portfolio</title>
	<subtitle>A website to show off my projects and aspirations.</subtitle>
	<link href="https://syst3mz.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://syst3mz.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2023-09-27T00:00:00+00:00</updated>
	<id>https://syst3mz.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>Hashing, the World of Message Digests</title>
		<published>2023-09-27T00:00:00+00:00</published>
		<updated>2023-09-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://syst3mz.github.io/hashes/" type="text/html"/>
		<id>https://syst3mz.github.io/hashes/</id>
		<content type="html">&lt;h1 id=&quot;why-can-t-you-just-send-me-my-password&quot;&gt;Why can&#x27;t you just send me my password?&lt;&#x2F;h1&gt;
&lt;p&gt;If you have ever forgotten a password to a website before, you have surely thought to your self: &amp;quot;Why can&#x27;t this website send me my password?&amp;quot; The short answer is: &amp;quot;the website does not know your password&amp;quot;. That might shock you, but the website really &lt;strong&gt;doesn&#x27;t&lt;&#x2F;strong&gt; know your password. The website knows the &lt;em&gt;hash&lt;&#x2F;em&gt; of your password. Hashes form the basis for a lot of security on the web and this post is dedicated to different hash functions. No prior knowledge in cryptography is assumed, but, basic math and some familiarity with the $\sum$ syntax, the modulus operator, binary representation, and exclusive or will be helpful. By the end of this post, you will know why a website can&#x27;t just send you back your password.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-store-hashes&quot;&gt;Why Store Hashes?&lt;&#x2F;h1&gt;
&lt;p&gt;As a user, we don&#x27;t want a website to store our passwords for two main reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the website is hacked those attackers now have a list of known good usernames and passwords.&lt;&#x2F;li&gt;
&lt;li&gt;A rogue site admin could take your password and username and sign in as you! If you reuse passwords (and I know you do) that same admin could now login to all those pages which share passwords without your knowledge.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;what-is-a-hash-digest-hash-function&quot;&gt;What is a Hash &#x2F; Digest &#x2F; Hash Function?&lt;&#x2F;h1&gt;
&lt;p&gt;A hash function is a procedure for taking an input (or message) of any length, and producing a fixed length output. That output is called the hash or digest of the input. When we use hash functions in the real world we want to exclusively use &lt;strong&gt;good&lt;&#x2F;strong&gt; hash functions otherwise we start to have problems quickly. Hashes exist to make it possible to distinguish between two messages without looking at the messages. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-ideal-hash&quot;&gt;An Ideal Hash&lt;&#x2F;h2&gt;
&lt;p&gt;For a hash function $H$ to be considered ideal the following properties must hold.&lt;&#x2F;p&gt;
&lt;p&gt;Given two messages $M$ and $D$ where $M\neq D$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$H(M)=H(M)$&lt;&#x2F;li&gt;
&lt;li&gt;$H(M)\neq H(D)$&lt;&#x2F;li&gt;
&lt;li&gt;The length of $H(M)$ should also be as small as possible.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We want the first and second property because it allows us to check that two messages are the same by comparing their hashes. In the case of a website, the website can check if $H(\textrm{supplied password})=\textrm{stored password hash}$ to decide if you entered the right password, without ever knowing your password or the supplied password.&lt;&#x2F;p&gt;
&lt;p&gt;The third property of a hash is nice because using less data to verify the message is good. Using a smaller hash is faster to compute and to send over a transmission medium.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-makes-a-hash-function-good&quot;&gt;What Makes a Hash Function Good?&lt;&#x2F;h2&gt;
&lt;p&gt;Unfortunately, ideal (or sometimes called perfect) hash functions don&#x27;t exist in the general case. So we use good-enough hashes in the real world. A good hash function has the following properties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When two messages have the same hash, this is called a collision. Hash Collisions are bad and a good hash function seeks to minimize them.&lt;&#x2F;li&gt;
&lt;li&gt;A hash&#x27;s distribution is how well it spreads the input space over the output space. We want a hash function with a distribution the spreads the inputs over the entire output space. &lt;&#x2F;li&gt;
&lt;li&gt;Fast (ish)&lt;&#x2F;li&gt;
&lt;li&gt;The hashes of two messages should be very different even if the messages are very similar.&lt;&#x2F;li&gt;
&lt;li&gt;Should always give the same hash or digest for the same message.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;difference-between-a-cryptographic-hash-function-and-a-regular-old-hash-function&quot;&gt;Difference Between a Cryptographic Hash Function and a Regular Old Hash Function:&lt;&#x2F;h2&gt;
&lt;p&gt;A hash function is considered &lt;em&gt;cryptographic&lt;&#x2F;em&gt; if given a message&#x27;s hash, it is not possible to learn anything about the original message. Cryptographers desire this property because they can then send $\textrm{hash}(\textrm{My secret key is password123})$ across an untrusted media like the internet without worrying about their secret being found out.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;a-really-bad-hash&quot;&gt;A (Really) Bad Hash&lt;&#x2F;h1&gt;
&lt;p&gt;This is the worst hash function I come up with, but its very simple. 
$$H(M)=1$$
Let&#x27;s start with the positives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;This hash function is really fast, in fact its hard to imagine a faster hash function. &lt;&#x2F;li&gt;
&lt;li&gt;This hash function also will always give the same hash for the same message. &lt;&#x2F;li&gt;
&lt;li&gt;This hash function cannot be reversed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Looking at the definition of &lt;a href=&quot;https:&#x2F;&#x2F;syst3mz.github.io&#x2F;hashes&#x2F;#what-makes-a-hash-function-good&quot;&gt;good&lt;&#x2F;a&gt; we can see where this fails. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All messages collide, which makes it useless to distinguish messages&lt;&#x2F;li&gt;
&lt;li&gt;A small change to the input, has no change to the output&lt;&#x2F;li&gt;
&lt;li&gt;This hash function does a poor job of spreading its outputs throughout the output space, by virtue of only having 1 output.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;an-improved-bad-hash&quot;&gt;An Improved Bad Hash&lt;&#x2F;h1&gt;
&lt;p&gt;Addition is the first hash function one might come up with and it is bad for similar reasons. &lt;&#x2F;p&gt;
&lt;p&gt;Let $\textrm{ascii()}$ be the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.asciitable.com&#x2F;&quot;&gt;ascii&lt;&#x2F;a&gt; value of the character.&lt;&#x2F;p&gt;
&lt;p&gt;Let $M_i$ be the $i$th character in the message. For example: &lt;&#x2F;p&gt;
&lt;p&gt;if $M=\textrm{Let&#x27;s go Blackhawks}$ then $M_0=L$ and $M_4=\textrm{S}$&lt;&#x2F;p&gt;
&lt;p&gt;$$H_2(M)=\sum_{k=0}^{\textrm{length}(M)}\textrm{ascii}(M_k)$$&lt;&#x2F;p&gt;
&lt;p&gt;This hash function is so easy its python implementation is just 5 lines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;hash2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;msg&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-annotation z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-parameter z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;str&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-annotation z-return z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-return z-python&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;int&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;0&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;char&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;msg&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-loop z-for z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-python&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;ord&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;char&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;$$H_2(\textrm{Paint the walls red}) = 1787$$
$$H_2(\textrm{I love winter}) = 1240$$&lt;&#x2F;p&gt;
&lt;p&gt;We are already doing better then our first hash. Two distinct messages have different hashes. Unfortunately without a tweak, we don&#x27;t actually have a hash function.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;see-if-you-can-find-why-h-2-is-not-a-hash-function&quot;&gt;See if you can find why $H_2$ is not a hash function.&lt;&#x2F;h2&gt;
&lt;details&gt;
&lt;summary&gt;Hint&lt;&#x2F;summary&gt;
Hash messages with very different lengths and see how many digits the corresponding hash has.
&lt;&#x2F;details&gt;
&lt;details&gt;
&lt;summary&gt;Hint 2&lt;&#x2F;summary&gt;
Can a hash function&#x27;s output have different lengths?
&lt;&#x2F;details&gt;
&lt;details&gt;
&lt;summary&gt;Answer&lt;&#x2F;summary&gt;
$H_2$ is not a hash function because the digests that $H_2$ outputs are not fixed size! To show you this, lets hash two messages &quot;A&quot; and the full text of the Declaration of Independence.
$$H_2(\textrm{A})=65$$
$$H_2(\textrm{Declaration of Independence}) = 753,434$$
As the size of input grows, so does the size of the digest. A hash function must output a fixed size digest, and as a result $H_2$ is not actually a hash function. 
&lt;&#x2F;details&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;an-improved-bad-hash-but-that-s-actually-a-hash-function&quot;&gt;An Improved Bad Hash (But that&#x27;s actually a hash function)&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s adjust the hash function to be:
$$H_3(M)=\left(\sum_{k=0}^{\textrm{length}(M)}\textrm{ascii}(M_k)\right)\mod 100$$
or the equivalent python code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;hash3&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;msg&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-annotation z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-parameter z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;str&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-annotation z-return z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-return z-python&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;int&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;0&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;char&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;msg&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-loop z-for z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-python&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;ord&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;char&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;%&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;100&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you don&#x27;t know $x\mod n$ or in python &lt;code&gt;x % n&lt;&#x2F;code&gt; is saying &amp;quot;Divide $x$ by $n$ and give me the remainder&amp;quot;. I chose 100 to keep numbers small but in practice we could operate mod anything.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s hash our messages again: 
$$H_3(\textrm{A}) = 65$$
$$H_3(\textrm{Declaration of Independence}) = 34$$
Great, neither of our hashes have launched into infinity and even though the Declaration of Independence is much longer it still fixed in size. Now that we have returned to fixed size land, let&#x27;s see if our new hash function is &lt;em&gt;good&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Positives: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The distribution is pretty okay. For longer messages it will start to bounce around a lot which is good, but for short messages this hash won&#x27;t be very good at distributing&lt;&#x2F;li&gt;
&lt;li&gt;Summing and looking up in a ascii table is pretty fast. Mod is much slower to compute but its only done once so we will call the speed ok.&lt;&#x2F;li&gt;
&lt;li&gt;This hash will always give the same value for the same message.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s practically impossible to reverse a message.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$H_3$ doesn&#x27;t change much for messages which are very similar. For example $$H_3(\textrm{AA})=30$$ $$H_3(\textrm{AB})=31$$ We would prefer that the hashes of these two (and really any two) message be very different.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Its trivial to find a message which collides. For instance: $$H_3(\textrm{AAAAD})=H_3(\textrm{BBBAA})=28$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;As a matter of fact $H_3$ will only ever output 100 distinct hashes $[0, 99]$. That&#x27;s thanks to our $\mod 100$, in practice we use much large hashes. For instance the current gold standard hash &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.movable-type.co.uk&#x2F;scripts&#x2F;sha256.html&quot;&gt;sha-256&lt;&#x2F;a&gt; uses a 256-bit output space. A 256 bit output space can produce $$115,792,089,237,316,195,423,570,985,008,687,907,853,269,984,665,640,564,039,457,584,007,913,129,639,936$$ hashes, which is considerably more than the 100 hashes we can produce. To truly wrap your head around the size of this number &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=S9JGmA5_unY&quot;&gt;this&lt;&#x2F;a&gt; video by 3Blue1Brown is great.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So would changing $\mod 100$ to $\mod 2^{256}$ fix the collision issue? No, it would just change what the colliding strings are. As a matter of fact &amp;quot;ZZZ&amp;quot; would then collide with &amp;quot;AAAK&amp;quot; $$H_3(\textrm{ZZZ})=H_3(\textrm{AAAK})=270$$&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;a-good-hash-function&quot;&gt;A Good Hash Function&lt;&#x2F;h1&gt;
&lt;p&gt;This is the full algorithm for a hash algorithm called FNV-1a&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-python&quot;&gt;FNV_PRIME&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;16777619&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-python&quot;&gt;FNV_OFFSET_BASIS&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2166136261&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;fnv_1a&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;message&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-annotation z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-parameter z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;str&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-annotation z-return z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-return z-python&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;int&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;hash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-python&quot;&gt;FNV_OFFSET_BASIS&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    &lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;byte&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;message&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;ascii&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-loop z-for z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;hash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;hash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;^&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;byte&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;hash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;hash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-python&quot;&gt;FNV_PRIME&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;%&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;32&lt;&#x2F;span&gt;

    &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;hash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Starting from the top, &lt;code&gt;FNV_PRIME&lt;&#x2F;code&gt; is a specially chosen prime number which helps distribute the hash function through out the 32-bit output space. &lt;code&gt;FNV_OFFSET_BASIS&lt;&#x2F;code&gt; is a second prime chosen for similar reasons, and to make the hash of zeros non-zero.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;byte&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;message&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;ascii&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-loop z-for z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, &lt;code&gt;for byte in bytes(message, &amp;quot;ascii&amp;quot;):&lt;&#x2F;code&gt; tells python to loop over every byte in the message and store that byte in &lt;code&gt;byte&lt;&#x2F;code&gt;. We get the bytes out of the message by taking the ASCII value of the character.&lt;&#x2F;p&gt;
&lt;p&gt;Then for each byte, we do two steps:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;hash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;hash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;^&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;byte&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Set the new state of the hash to the e&lt;strong&gt;x&lt;&#x2F;strong&gt;clusive &lt;strong&gt;or&lt;&#x2F;strong&gt; (XOR) of the current hash and the current byte of the message. This is what actually compresses our message into the hash.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;hash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;hash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-python&quot;&gt;FNV_PRIME&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;%&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;32&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Multiply the new hash (with our new byte of data) with the FNV_PRIME constant to spread the hash throughout the output space. Then, mod by $2^{32}$ to wrap back into the 32-bit integer space.&lt;&#x2F;p&gt;
&lt;p&gt;This hash function is much better than any of our hash functions.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fnv_1a(&amp;quot;fruit loops&amp;quot;)&lt;&#x2F;code&gt; always equals &lt;code&gt;0x812559a844c8e9d0a75f1cb34a037966d755598dcd891e5d9032f4db0107b22d4bada04f26&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Hashes of two messages which are very similar have different messages:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fnv_1a(&amp;quot;fruit loops&amp;quot;) = 0xada04f26&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fnv_1a(&amp;quot;gruit loops&amp;quot;) = 0x19bb6749&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Collisions are hard to find.&lt;&#x2F;li&gt;
&lt;li&gt;This is using quite a bit of its input space.&lt;&#x2F;li&gt;
&lt;li&gt;Multiplication is pretty fast on computers and XOR is as fast as anything can be on a computer.&lt;&#x2F;li&gt;
&lt;li&gt;Unfortunately, FNV-1a is not a cryptographic hash function.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h1&gt;
&lt;p&gt;Hopefully now you are beginning to see how hard it is to make a good hash function. Literal years have gone into working out what is the best way to hash messages and we have two contenders:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Blake2B, current fastest (good) hashing algorithm (as of late 2023)&lt;&#x2F;li&gt;
&lt;li&gt;SHA-256, industry standard hash&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As well as several vestigial &amp;quot;contenders&amp;quot;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;SHA1, SHA2, SHA3, predecessor versions of SHA-256. They have known efficient attacks to generate collisions&lt;&#x2F;li&gt;
&lt;li&gt;MD5, an older hashing system&lt;&#x2F;li&gt;
&lt;li&gt;CRC32, a message error detection function that uses many of the same ideas as hashing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;who-cares-about-bad-hash-functions&quot;&gt;Who Cares About Bad Hash Functions?&lt;&#x2F;h2&gt;
&lt;p&gt;Ideally you! We all uses hashes everywhere even if you don&#x27;t know it. Almost every secure message you send online is protected by something called a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HMAC&quot;&gt;hash-based message authentication code (HMAC)&lt;&#x2F;a&gt; which is based on the hash function. Without it most modern secure communication could not occur. Without good hash functions HMACs would not exist&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;further-reading&quot;&gt;Further Reading&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=orIgy2MjqrA&quot;&gt;How does SHA work?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Proof of work</title>
		<published>2023-04-09T00:00:00+00:00</published>
		<updated>2023-04-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://syst3mz.github.io/proof-of-work/" type="text/html"/>
		<id>https://syst3mz.github.io/proof-of-work/</id>
		<content type="html">&lt;p&gt;Showing off something cool!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;kepler-s-equation&quot;&gt;Kepler&#x27;s Equation&lt;&#x2F;h1&gt;
&lt;p&gt;Johannes Kepler was a 16th century astronomer (among many other things) from Germany. He is well known for establishing the way planets moved around the sun with his laws of planetary motion. As it turns out, these laws can be applied to many non-planet celestial objects, and can accurately predict the position of objects in orbits. &lt;&#x2F;p&gt;
&lt;p&gt;This simulation was programmed using Kepler&#x27;s laws. Click anywhere in the black box bellow to interact with the simulation. If you can&#x27;t see it, grab a .exe version &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Syst3mz&#x2F;kepler_sim&#x2F;releases&#x2F;tag&#x2F;1.0.0&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;canvas id=&quot;glcanvas&quot; tabindex=&#x27;1&#x27; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;&#x2F;canvas&gt;&lt;&#x2F;p&gt;
&lt;script src=&quot;https:&#x2F;&#x2F;not-fl3.github.io&#x2F;miniquad-samples&#x2F;mq_js_bundle.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script&gt;load(&quot;.&#x2F;..&#x2F;kepler_sim.wasm&quot;);&lt;&#x2F;script&gt;
&lt;p&gt;Use J to reduce the timescale, K to reset it to 10, L to increase the timescale.&lt;&#x2F;p&gt;
&lt;p&gt;Holding shift will multiply the change by 10, holding z will multiply the change by 100, holding both will multiply the change by 1000.&lt;&#x2F;p&gt;
&lt;p&gt;You can note that as the red &amp;quot;distance&amp;quot; numbers increase, the speed of the planet decreases. This shows that my simulation is abiding by Kepler&#x27;s laws which would predict that objects further from the body they are orbiting must be going slower.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;more-information-about-orbits&quot;&gt;More information About Orbits&lt;&#x2F;h1&gt;
&lt;p&gt;A great video about orbits, which helped serve as the foundation of this project can be found &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=t89De819YMA&quot;&gt;here&lt;&#x2F;a&gt; It goes in to significant depth about the techniques used to simulate orbits, as well as being very well animated and voiced. They take this project much further than I have.&lt;&#x2F;p&gt;
&lt;p&gt;Another great video by Sebastian Lague can be found &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=7axImc1sxa0&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And I would of course be remiss not to include the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Kepler%27s_laws_of_planetary_motion&quot;&gt;Wikipedia&lt;&#x2F;a&gt; page for Kepler&#x27;s laws. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;technical-information-about-the-project&quot;&gt;Technical Information About the Project&lt;&#x2F;h1&gt;
&lt;p&gt;I wrote this simulation in the Rust programming language because Rust is fast and portable. This simulation is not the most efficient simulation of planetary orbits, and the rendering of orbital paths is particularly in-efficient. The next task to improve this project would be to speed up the line drawing significantly. For graphics, I am using the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;macroquad.rs&#x2F;&quot;&gt;Macroquad&lt;&#x2F;a&gt; crate, which was perfect for this project because of its ability to compile to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WASM&lt;&#x2F;a&gt; allowing easy deployment to modern web browsers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-does-the-simulation-work&quot;&gt;How does the simulation work?&lt;&#x2F;h2&gt;
&lt;p&gt;The simulation is really a fancy equation solver. The equation I try to solve is $M = E - esin(E)$ Where $M$ is the mean anomaly, $E$ is the eccentric anomaly, and $e$ is the eccentricity. For a fantastic explanation of what these values mean, see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;t89De819YMA?t=386&quot;&gt;here&lt;&#x2F;a&gt;. Once $M$ is found, I can use a little trigonometry ($\sin$ and $\cos$, my old enemies) and a planets semi-major and minor axes to find that planet&#x27;s position in space. From there its just a bit of rendering math that Macroquad spared me from to get planets going in a ellipse.&lt;&#x2F;p&gt;
&lt;p&gt;The major issue of this approach is finding E. Kepler himself doubted the existence of closed form solution to his equation, and to this day no such solution has been found. Right now, the best we can do is use a variety of root finding algorithms to approach a true answer, but we can&#x27;t ever guarantee that we have found a &amp;quot;perfect&amp;quot; solution. I chose to use Newton&#x27;s method to solve this equation because I knew it from Calculus and it is relatively simple to implement. &lt;&#x2F;p&gt;
&lt;p&gt;Here is the full equation solver at the heart of the simulator:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-rust&quot;&gt;EPSILON&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-float z-rust&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-float z-rust&quot;&gt;000001&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;newtons_method&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;F, G&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; F, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;dx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; G&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;where&lt;&#x2F;span&gt; F&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; Fn&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt; -&amp;gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;, G&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; Fn&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt; -&amp;gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; root &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; x0&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;

    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;loop&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; next_root &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; root &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;root&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-rust&quot;&gt;dx&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;root&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; delta &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;abs&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;next_root &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt; root&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
        root &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; next_root&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;

        &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;if&lt;&#x2F;span&gt; delta &lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-rust&quot;&gt;EPSILON&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;break&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    root
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lets walk through it line by line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-rust&quot;&gt;EPSILON&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-float z-rust&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-float z-rust&quot;&gt;000001&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For reasons unknown to me, epsilon is chosen to mean: &amp;quot;some very small value&amp;quot;. I will not break mathematical tradition so epsilon is some very small value, in this case $\frac{1}{1,000,000}$. Due to how Newton&#x27;s method converges on a solution, when the changes to the guess start to be very small, we can be highly confident we are near a root. Epsilon controls how small my program considers &amp;quot;small enough&amp;quot;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;newtons_method&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;F, G&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; F, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;dx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; G&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is Rust for: &amp;quot;Define a function called &lt;code&gt;newtons_method&lt;&#x2F;code&gt;. It accepts three arguments called &lt;code&gt;x0&lt;&#x2F;code&gt;, &lt;code&gt;fx&lt;&#x2F;code&gt;, &lt;code&gt;dx&lt;&#x2F;code&gt; returns a decimal number.&amp;quot; The &lt;code&gt;&amp;lt;F, G&amp;gt;&lt;&#x2F;code&gt; tells Rust, that &lt;code&gt;newtons_method&lt;&#x2F;code&gt; accepts arguments of any type and should call those types &lt;code&gt;F&lt;&#x2F;code&gt; and &lt;code&gt;G&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;where&lt;&#x2F;span&gt; F&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Fn&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; G&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Fn&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This restricts what data type can be put into &lt;code&gt;F&lt;&#x2F;code&gt; and &lt;code&gt;G&lt;&#x2F;code&gt; to be: &amp;quot;Any function which takes a decimal number as input, returns a decimal number as output.&amp;quot;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; root &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; x0&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make a variable called &lt;code&gt;root&lt;&#x2F;code&gt;, assign &lt;code&gt;x0&lt;&#x2F;code&gt; to it. Rust does not let variables change by default, so the &lt;code&gt;mut&lt;&#x2F;code&gt; before &lt;code&gt;root&lt;&#x2F;code&gt; lets &lt;code&gt;root&lt;&#x2F;code&gt; change. Newton&#x27;s method requires an initial guess (often called $x_0$) the better this initial guess is, the faster Newton&#x27;s method will converge to a root of the function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;loop&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;loop&lt;&#x2F;code&gt; keyword in rust, says to do what comes after the &lt;code&gt;{&lt;&#x2F;code&gt; forever.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; next_root &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; root &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;root&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-rust&quot;&gt;dx&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;root&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;this is the Newton&#x27;s method &amp;quot;part&amp;quot; of the algorithm. Newtons method is defined as $$x_{n+1} = x_n - \frac{f(x_n)}{f&#x27;(x_n)}$$ In English, the next guess is equal to the current guess minus $f$ of the current guess over the derivative of $f$ of the current guess.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; delta &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;abs&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;next_root &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt; root&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compute how far the new guess is from the previous guess. The abs is there because we only care about the distance on the number line.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;root &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; next_root&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;set &lt;code&gt;root&lt;&#x2F;code&gt; to the next guess (&lt;code&gt;next_root&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;if&lt;&#x2F;span&gt; delta &lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-rust&quot;&gt;EPSILON&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;break&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I grouped these three lines, because they all act as one &amp;quot;thing&amp;quot;. If the change (&lt;code&gt;delta&lt;&#x2F;code&gt;) is less than or equal to epsilon, stop the infinite loop.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;root
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;spit out what ever root was calculated.&lt;&#x2F;p&gt;
&lt;p&gt;In brief, this function can compute roots of any differentiable equation...eventually. Since Kepler&#x27;s Equation is (in fact) an equation, Newton&#x27;s method works for it!
Once we have this, solving for $E$ is as simple as: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;solve_keplers&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;mean_anomaly&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;eccentricity&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; eccentric_anomaly &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;if&lt;&#x2F;span&gt; eccentricity &lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-float z-rust&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-float z-rust&quot;&gt;8&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-rust&quot;&gt;PI&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;mean_anomaly&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-support z-function z-rust&quot;&gt;newtons_method&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;
            eccentric_anomaly&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;eccentric_anomaly&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;keplers_equation&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;mean_anomaly&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; eccentric_anomaly&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; eccentricity&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;eccentric_anomaly&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;keplers_equation_derivation&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;eccentric_anomaly&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; eccentricity&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might note at the top of the function, I guess that eccentric anomaly is either $\pi$ or what ever the mean anomaly. This is the seed value for Newton&#x27;s method ($x_0$). These specific starting values are recommended by Anderson, and have worked well for me.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introduction to Parsing</title>
		<published>2023-01-23T00:00:00+00:00</published>
		<updated>2023-01-23T00:00:00+00:00</updated>
		<link rel="alternate" href="https://syst3mz.github.io/intro-to-parsing/" type="text/html"/>
		<id>https://syst3mz.github.io/intro-to-parsing/</id>
		<content type="html">&lt;p&gt;Parsing is the first meaningful step to processing a programming language. But what is parsing?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;parsing-and-lexing-too&quot;&gt;Parsing (and Lexing too!)&lt;&#x2F;h1&gt;
&lt;p&gt;Parsing, in very brief, is taking some string of text and turning it into a something meaningful for the computer.
Most often, this is an &lt;strong&gt;A&lt;&#x2F;strong&gt;bstract &lt;strong&gt;S&lt;&#x2F;strong&gt;yntax &lt;strong&gt;T&lt;&#x2F;strong&gt;ree (&lt;strong&gt;AST&lt;&#x2F;strong&gt;). An &lt;strong&gt;AST&lt;&#x2F;strong&gt; is a tree where all information that is
not relevant to the further processing of some source is removed. Consider the following very complex
expression bellow:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;1 + (2 * 4)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before we fall down the rabbit hole, let&#x27;s first look at what the above expression would appear like as (one) &lt;strong&gt;AST&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mermaid.live&#x2F;edit#pako:eNpVkDEPgjAQhf8KuVEhsQgoDA6GVRfdWoYKBZrQ1tQSQwj_3Vp06E33vnv3krsZatUwKKAd1LvuqTbBvSQysIXwmUuqpyqIolMQ4-soHkxX6zB2cI_RTyOnE0xgS8Bj6T9mhamDmZ-WOXjAsWc64o2nc38pdxDtcFJBCIJpQXljL5m_YwKmZ4IRKGw78K43BIhcrJGORt0mWUNh9MhCGJ8NNazktNNUQNHS4WUpa7hR-rL-play5R0sH4fdVjo&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;mermaid.ink&#x2F;img&#x2F;pako:eNpVkDEPgjAQhf8KuVEhsQgoDA6GVRfdWoYKBZrQ1tQSQwj_3Vp06E33vnv3krsZatUwKKAd1LvuqTbBvSQysIXwmUuqpyqIolMQ4-soHkxX6zB2cI_RTyOnE0xgS8Bj6T9mhamDmZ-WOXjAsWc64o2nc38pdxDtcFJBCIJpQXljL5m_YwKmZ4IRKGw78K43BIhcrJGORt0mWUNh9MhCGJ8NNazktNNUQNHS4WUpa7hR-rL-play5R0sH4fdVjo?type=png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;structure-of-an-ast&quot;&gt;Structure of an AST&lt;&#x2F;h2&gt;
&lt;p&gt;Okay, this might look like a lot (and it is) but let&#x27;s look at it&#x27;s structure before panicking. The boxes are called &lt;code&gt;nodes&lt;&#x2F;code&gt;. Each &lt;code&gt;node&lt;&#x2F;code&gt; may have a number of &lt;code&gt;children&lt;&#x2F;code&gt;. The directional arrows indicate that
the node on the pointy end of the arrow is a child of the node at the flat end.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;but-what-does-it-mean&quot;&gt;But What Does It Mean?&lt;&#x2F;h2&gt;
&lt;p&gt;Now, let&#x27;s start from the top. We see a &lt;code&gt;Binary&lt;&#x2F;code&gt; node, this has no relation to the binary working in you computer; the &lt;code&gt;Binary&lt;&#x2F;code&gt; refers 
to the number of operands (&lt;code&gt;children&lt;&#x2F;code&gt;) the node has. The addition operation &lt;code&gt;+&lt;&#x2F;code&gt; adds a left hand number (in this case 1) to a right hand number.
But we don&#x27;t have a number on the right hand side we have another &lt;code&gt;Binary&lt;&#x2F;code&gt;. That is okay, remember at this point 
we are not doing any math just giving the input string more meaning for the computer. As a human, 
it&#x27;s trivial to tell that the &lt;code&gt;(2 * 4)&lt;&#x2F;code&gt; should be done before the &lt;code&gt;1 +&lt;&#x2F;code&gt; but the computer is not that smart.
The genius of the &lt;strong&gt;AST&lt;&#x2F;strong&gt; is that we can convey this &amp;quot;do &lt;em&gt;a&lt;&#x2F;em&gt; before &lt;em&gt;b&lt;&#x2F;em&gt;&amp;quot; thinking to the computer.
When the computer eventually goes to evaluate the tree, the logic is pretty simple.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; class=&quot;language-cs z-code&quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span class=&quot;z-source z-cs&quot;&gt;&lt;span class=&quot;z-storage z-type z-cs&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-cs&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-cs&quot;&gt;eval&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-parameters z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-cs&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-parameters z-cs&quot;&gt;&lt;span class=&quot;z-support z-type z-cs&quot;&gt;Node&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-cs&quot;&gt;n&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-parameters z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-cs&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-cs&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-body z-cs&quot;&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-cs&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-control z-conditional z-if z-cs&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-cs&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-cs&quot;&gt;&lt;span class=&quot;z-variable z-other z-cs&quot;&gt;n&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-reflection z-cs&quot;&gt;is&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-cs&quot;&gt;Binary&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-cs&quot;&gt;b&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-cs&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-cs&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;
        &lt;span class=&quot;z-storage z-type z-variable z-cs&quot;&gt;var&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-cs&quot;&gt;lhs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-variable z-cs&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-cs&quot;&gt;&lt;span class=&quot;z-variable z-function z-cs&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-cs&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-cs&quot;&gt;&lt;span class=&quot;z-meta z-group z-cs&quot;&gt;&lt;span class=&quot;z-variable z-other z-cs&quot;&gt;b&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-cs&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-cs&quot;&gt;lhs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-cs&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-cs&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-storage z-type z-variable z-cs&quot;&gt;var&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-cs&quot;&gt;rhs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-variable z-cs&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-cs&quot;&gt;&lt;span class=&quot;z-variable z-function z-cs&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-cs&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-cs&quot;&gt;&lt;span class=&quot;z-meta z-group z-cs&quot;&gt;&lt;span class=&quot;z-variable z-other z-cs&quot;&gt;b&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-cs&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-cs&quot;&gt;rhs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-cs&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-cs&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-keyword z-control z-conditional z-if z-cs&quot;&gt;if&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-cs&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-cs&quot;&gt;&lt;span class=&quot;z-variable z-other z-cs&quot;&gt;b&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-cs&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-cs&quot;&gt;operator&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-cs&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-cs&quot;&gt;Plus&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-cs&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-cs&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;
            &lt;span class=&quot;z-keyword z-control z-flow z-return z-cs&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-cs&quot;&gt;lhs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-cs&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-cs&quot;&gt;rhs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-cs&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-cs&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-keyword z-control z-conditional z-else z-cs&quot;&gt;else &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-cs&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;
            &lt;span class=&quot;z-keyword z-control z-flow z-return z-cs&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-cs&quot;&gt;lhs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-cs&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-cs&quot;&gt;rhs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-cs&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-cs&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-cs&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-control z-conditional z-else z-cs&quot;&gt;else &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-cs&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;
        &lt;span class=&quot;z-storage z-type z-variable z-cs&quot;&gt;var&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-cs&quot;&gt;num&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-variable z-cs&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-cast z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-cs&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-type z-cs&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-cs&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-cs&quot;&gt;n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-cs&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-keyword z-control z-flow z-return z-cs&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-cs&quot;&gt;num&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-cs&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-cs&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-cs&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-cs&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-cs&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-cs&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The recursive nature of &lt;code&gt;eval&lt;&#x2F;code&gt; is what gives us operator precedence. 
The &lt;strong&gt;AST&lt;&#x2F;strong&gt; also does not have any of the parentheses, spaces or anything that is not strictly related to the operations
the computer needs to do to evaluate this expression. The parentheses meaning of &amp;quot;do this first&amp;quot; is encoded in the 
structure of the tree.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;actually-making-the-tree&quot;&gt;Actually Making the Tree&lt;&#x2F;h2&gt;
&lt;p&gt;Taking the input expression(s) and turning them into an &lt;strong&gt;AST&lt;&#x2F;strong&gt; is the job of a &lt;em&gt;parser&lt;&#x2F;em&gt; and &lt;em&gt;tokenizer&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tokenizer-lexer&quot;&gt;Tokenizer&#x2F;Lexer&lt;&#x2F;h3&gt;
&lt;p&gt;Tokenizing has not been mentioned until now, but the tokenizer&#x2F;lexer is a function that runs before the parser. It (somewhat unsurprisingly)
turns the input data into a stream of tokens. Tokens are small pieces of a language that can be thought of as &amp;quot;atomic.&amp;quot;
In the expression above, a token stream would look like:
&lt;code&gt;NUMBER(1), PLUS, LPAREN, NUMBER(2), STAR, NUMBER(4), RPAREN&lt;&#x2F;code&gt;.
Now, for making the expression atomic it seems to have gotten...longer? That&#x27;s because the tokens are &amp;quot;atomic&amp;quot; for the computer
not necessarily for us. At this point, we no longer have to think about strings, we can think about tokens! Oh, and all the spaces are gone.
Actually our tokenizer has the superpower of stripping away spaces (anyone who has worked with human text before knows how valuable this is).
This means that the token stream generated by &lt;code&gt;1+(2* 4)&lt;&#x2F;code&gt; (note the missing spaces) is exactly the same as the token stream generated by &lt;code&gt;1 + (2 * 4)&lt;&#x2F;code&gt;: &lt;code&gt;NUMBER(1), PLUS, LPAREN, NUMBER(2), STAR, NUMBER(4), RPAREN&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parser&quot;&gt;Parser&lt;&#x2F;h3&gt;
&lt;p&gt;Okay, we have our token stream in hand...what do we do with it? We hand that stream to the parser. The parser is a function
which takes our token stream as input and produces an &lt;strong&gt;AST&lt;&#x2F;strong&gt; as output. There are quite a few methods to parse, so many in fact
I think each one should get it&#x27;s own page. For a good overview I can recommend &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@chetcorcos&#x2F;introduction-to-parsers-644d1b5d7f3d&quot;&gt;this&lt;&#x2F;a&gt; 
blog post by Chet Corcos.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;My post on &lt;a href=&quot;https:&#x2F;&#x2F;syst3mz.github.io&#x2F;lalr-generator&#x2F;&quot;&gt;LR &amp;amp; LALR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;LL_parser&quot;&gt;LL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.booleanworld.com&#x2F;building-recursive-descent-parsers-definitive-guide&#x2F;&quot;&gt;Recursive Decent&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;(This is not a complete list, just common parsers I have run into.)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>LR &amp; LALR Parsing</title>
		<published>2022-12-18T00:00:00+00:00</published>
		<updated>2022-12-18T00:00:00+00:00</updated>
		<link rel="alternate" href="https://syst3mz.github.io/lalr-generator/" type="text/html"/>
		<id>https://syst3mz.github.io/lalr-generator/</id>
		<content type="html">&lt;p&gt;This page assumes you have read at least &lt;a href=&quot;https:&#x2F;&#x2F;syst3mz.github.io&#x2F;intro-to-parsing&#x2F;&quot;&gt;intro to parsing&lt;&#x2F;a&gt; or know what parsing is.
LR and by extension LALR parsers are a type of parser which creates the &lt;strong&gt;AST&lt;&#x2F;strong&gt; bottom up, and reads the input left-to-right.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-quick-note-on-notation&quot;&gt;A Quick Note on Notation&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ebnf&quot; class=&quot;language-ebnf z-code&quot;&gt;&lt;code class=&quot;language-ebnf&quot; data-lang=&quot;ebnf&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;S -&amp;gt; A &amp;quot;c&amp;quot;
A -&amp;gt; &amp;quot;ab&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What are you looking at? In very brief, above is a &lt;em&gt;grammar&lt;&#x2F;em&gt;. Grammars define a &lt;em&gt;language&lt;&#x2F;em&gt;, and a language is the set of all strings
that fit a grammar. Read it from top-to-bottom and left to right.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;S&lt;&#x2F;code&gt; is a &amp;quot;non-terminal&amp;quot;, meaning it&#x27;s not a string literal.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-&amp;gt;&lt;&#x2F;code&gt; says &amp;quot;Wherever you see what precedes me, you can replace it with what succeeds me.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;A&lt;&#x2F;code&gt; is another &amp;quot;non-terminal&amp;quot;. A non-terminal on the right side of an arrow shows the power of grammars. Grammars alllow embedding non-terminals within non-terminals, to create more complex languages.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;c&amp;quot;&lt;&#x2F;code&gt; a string literal, the only kind of &amp;quot;terminal&amp;quot; that exists.  Additionally, its position after &lt;code&gt;A&lt;&#x2F;code&gt; indicates that &lt;code&gt;&amp;quot;c&amp;quot;&lt;&#x2F;code&gt; must follow a &lt;code&gt;A&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;One important assumption made is that any amount of whitespace may occur between parts of a non-terminal on the right side of an arrow.&lt;&#x2F;p&gt;
&lt;p&gt;See if you can determine if the following strings fit in the language defined above. Click the following strings below to see if they are in the language.&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;&quot;abc&quot;&lt;&#x2F;summary&gt;
✅ Yep, this one works
&lt;&#x2F;details&gt;
&lt;details&gt;
&lt;summary&gt;&quot;abcc&quot;&lt;&#x2F;summary&gt;
❌ Nope, the second c makes this string not part of the language defined above.
&lt;&#x2F;details&gt;
&lt;details&gt;
&lt;summary&gt;&quot;ababc&quot;&lt;&#x2F;summary&gt;
❌ Nope, the second ab makes this string not part of the language defined above.
&lt;&#x2F;details&gt;
&lt;details&gt;
&lt;summary&gt;&quot;ab c&quot;&lt;&#x2F;summary&gt;
✅ Yep, this one works. Remember that for this notation any amount of whitespace may follow.
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;bottom-up&quot;&gt;Bottom up&lt;&#x2F;h2&gt;
&lt;p&gt;Just what does it mean to make the &lt;strong&gt;AST&lt;&#x2F;strong&gt; from the bottom up? Check back later for more information!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Thoughts on Zola</title>
		<published>2022-12-18T00:00:00+00:00</published>
		<updated>2022-12-18T00:00:00+00:00</updated>
		<link rel="alternate" href="https://syst3mz.github.io/thoughts-on-zola/" type="text/html"/>
		<id>https://syst3mz.github.io/thoughts-on-zola/</id>
		<content type="html">&lt;p&gt;This website, is coded by me using the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; Static-Site-Generator, using the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;abridge.netlify.app&#x2F;&quot;&gt;Abridge&lt;&#x2F;a&gt; theme. The website is hosted with ❤️ on Github Pages.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;experience-using-zola&quot;&gt;Experience Using Zola&lt;&#x2F;h3&gt;
&lt;p&gt;My experience using Zola has been largely good, however there a few major complaints I have about the system. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using themes is hard...You have to specify to use the theme&#x27;s version of index.html and page for every page you make. This inefficiency can make changing themes hard.&lt;&#x2F;li&gt;
&lt;li&gt;Sections are hard to wrap your head around. I think most of the challenge comes down to section configuration being handled by a file called &lt;code&gt;_index.html&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The docs, are very clearly designed with a blog in mind...which is a benefit if you&#x27;re making a blog. However, it&#x27;s hard to apply that same structure to other kinds of web pages.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Despite these complaints, Zola and Abridge have made this project much easier. So thanks Zola and Abridge!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Nimbus</title>
		<published>2022-02-01T00:00:00+00:00</published>
		<updated>2022-02-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://syst3mz.github.io/nimbus/" type="text/html"/>
		<id>https://syst3mz.github.io/nimbus/</id>
		<content type="html">&lt;p&gt;Nimbus is an interpreted multi-paradigm general purpose programming language that I am developing.&lt;&#x2F;p&gt;
&lt;p&gt;I am designing Nimbus to be the fastest programming language to write code in. To meet that goal Nimbus will make sacrifices to its safety and run-time speed. I am writing Nimbus, not only as a learning experience, but to increase my productivity as a programmer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;planned-features&quot;&gt;Planned Features&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;familiar-syntax&quot;&gt;Familiar Syntax&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;nimbus&quot; class=&quot;language-nimbus z-code&quot;&gt;&lt;code class=&quot;language-nimbus&quot; data-lang=&quot;nimbus&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;fn fibbo(Int:n) -&amp;gt; Int {
    if n == 1 || n == 2 {
        return 1
    }

    return fibbo(n-1) + fibbo(n-2)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;semicolons-only-where-needed&quot;&gt;Semicolons Only Where Needed&lt;&#x2F;h3&gt;
&lt;p&gt;Note in the above code sample, there are no semicolons. Code blocks and other &amp;quot;self-ending&amp;quot; language constructs can be 
semicolon free.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optional-and-result-type-syntax&quot;&gt;Optional and Result Type Syntax&lt;&#x2F;h3&gt;
&lt;p&gt;Any type can be made optional with the addition of a &lt;code&gt;?&lt;&#x2F;code&gt;. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nimbus&quot; class=&quot;language-nimbus z-code&quot;&gt;&lt;code class=&quot;language-nimbus&quot; data-lang=&quot;nimbus&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;int: alwaysValue = 2 &#x2F;&#x2F; There is always a non-none value in alwaysValue
int?: maybe = 2 &#x2F;&#x2F; An option type with a value
int?: no = None &#x2F;&#x2F; An option type with no value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The same syntax can be used to check if a value exists.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;maybe = maybe? + 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If there is no value in &lt;code&gt;maybe&lt;&#x2F;code&gt; and if the outer function can return an option, then &lt;code&gt;None&lt;&#x2F;code&gt; is immediately returned; otherwise 
a &lt;code&gt;ExpectedSome&lt;&#x2F;code&gt; exception is thrown.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;garbage-collection&quot;&gt;Garbage Collection&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;A&lt;&#x2F;strong&gt;utomatic &lt;strong&gt;M&lt;&#x2F;strong&gt;emory &lt;strong&gt;M&lt;&#x2F;strong&gt;anagement (AMM) is a must to support the goal of &amp;quot;fast-to-write.&amp;quot; Nimbus will use a garbage collector to handle AMM. Using a garbage collector lets the programmer focus on the program, not on complex move semantics or preventing memory cycles.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;multiple-inheritance&quot;&gt;Multiple Inheritance&lt;&#x2F;h3&gt;
&lt;p&gt;Whereas problems like the well studied &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Multiple_inheritance#:~:text=The%20%22diamond%20problem%22%20(sometimes,from%20both%20B%20and%20C.&quot;&gt;diamond problem&lt;&#x2F;a&gt;
exist, the increase of re-usability in code that multiple inheritance can provide is well worth the challenges associated with multiple inheritance.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;function-level-structural-subtyping-restricted-duck-typing&quot;&gt;Function Level Structural Subtyping (Restricted Duck-Typing)&lt;&#x2F;h3&gt;
&lt;p&gt;To supplement multiple inheritance, allowing functions to explicitly define what data they need to work 
will allow a massive increase in re-usability.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nimbus&quot; class=&quot;language-nimbus z-code&quot;&gt;&lt;code class=&quot;language-nimbus&quot; data-lang=&quot;nimbus&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&#x2F;&#x2F; syntax under heavy development!!!
fn add_one&amp;lt;T: T.Int:number&amp;gt;(T:holder) {
    holder.number += 1
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tagged-generic-enums-pattern-matching&quot;&gt;Tagged &amp;amp; Generic Enums + Pattern Matching&lt;&#x2F;h3&gt;
&lt;p&gt;Nimbus will rip &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&#x27;s&lt;&#x2F;a&gt; excellent enums and pattern matching because they allow expressive and correct code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gradual-correctness&quot;&gt;Gradual Correctness&lt;&#x2F;h3&gt;
&lt;p&gt;The Nimbus compiler will have multiple levels of safety with safer code requiring stricter compile-time checks. The programmer may chose to hack something together quickly using exceptions to handle errors. Later, they can come back switch a compiler flag, and the Nimbus compiler will enforce safety.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;co-pilot-compiler&quot;&gt;Co-pilot Compiler&lt;&#x2F;h3&gt;
&lt;p&gt;For the co-pilot, the compiler must be able to run in an &amp;quot;interactive&amp;quot; mode, where a file is watched and an AST is generated in real time for reporting to the IDE. It will provide fixes in real time as errors occur. The compiler should assume that the developer is &lt;em&gt;wrong&lt;&#x2F;em&gt; because as they are writing it, their code is almost certainly wrong. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;&#x2F;h1&gt;
&lt;details&gt;
&lt;summary&gt;
    Nimbus&#x27;s grammar (work in progress)
&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;ebnf&quot; class=&quot;language-ebnf z-code&quot;&gt;&lt;code class=&quot;language-ebnf&quot; data-lang=&quot;ebnf&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;program        -&amp;gt; declaration+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;declarations&quot;&gt;Declarations&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ebnf&quot; class=&quot;language-ebnf z-code&quot;&gt;&lt;code class=&quot;language-ebnf&quot; data-lang=&quot;ebnf&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;declaration    -&amp;gt; abstract? classDecl
				| fnDecl
				| varDecl
				| enumDecl
				| useDecl

classDecl      -&amp;gt; &amp;quot;class&amp;quot; identifier (&amp;quot;&amp;lt;&amp;quot; identifierl &amp;quot;&amp;gt;&amp;quot;)? inheritl? &amp;quot;{&amp;quot; classitem* &amp;quot;}&amp;quot;
inherit        -&amp;gt; &amp;quot;:&amp;quot; (gtype | stype)
classitem      -&amp;gt; amod classDecl
                | amod fnDecl
                | amod varDecl
                | useDecl
                

funDecl        -&amp;gt; fn

varDecl        -&amp;gt; &amp;quot;imut&amp;quot;? &amp;quot;var&amp;quot; (type &amp;quot;:&amp;quot; )? identifier (&amp;quot;=&amp;quot; expression)?

useDecl        -&amp;gt; &amp;quot;use&amp;quot; namespace (&amp;quot;as&amp;quot; identifier)?
namespace      -&amp;gt; (identifier &amp;quot;.&amp;quot;)* identifier

enumDecl       -&amp;gt; &amp;quot;enum&amp;quot; identifier (&amp;quot;&amp;lt;&amp;quot; identifierl &amp;quot;&amp;gt;&amp;quot;)? &amp;quot;{&amp;quot; varientl &amp;quot;}&amp;quot;
variant        -&amp;gt; identifier (&amp;quot;(&amp;quot; typel &amp;quot;)&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;statements&quot;&gt;Statements&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ebnf&quot; class=&quot;language-ebnf z-code&quot;&gt;&lt;code class=&quot;language-ebnf&quot; data-lang=&quot;ebnf&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;statement      -&amp;gt; exprStmt
                | forStmt
                | ifStmt
                | returnStmt
                | whileStmt
                | block

exprStmt       -&amp;gt; expression &amp;quot;;&amp;quot;
forStmt        -&amp;gt; &amp;quot;for&amp;quot; identifier &amp;quot;in&amp;quot; expression block
ifStmt         -&amp;gt; if
returnStmt     -&amp;gt; &amp;quot;return&amp;quot; expression?
whileStmt      -&amp;gt; &amp;quot;while&amp;quot; expression block
block          -&amp;gt; &amp;quot;{&amp;quot; (varDecl | statment)* expression?&amp;quot;}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;expressions&quot;&gt;Expressions&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ebnf&quot; class=&quot;language-ebnf z-code&quot;&gt;&lt;code class=&quot;language-ebnf&quot; data-lang=&quot;ebnf&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;expression     -&amp;gt; assignment
                | if
                
if             -&amp;gt; &amp;quot;if&amp;quot; expression block else?
else           -&amp;gt; (&amp;quot;else&amp;quot; &amp;quot;if&amp;quot; expression block)* &amp;quot;else&amp;quot; block

assignment     -&amp;gt; ( call &amp;quot;.&amp;quot; )? identifier &amp;quot;=&amp;quot; assignment
               | logic_or

logic_or       -&amp;gt; logic_and ( &amp;quot;||&amp;quot; logic_and )*
logic_and      -&amp;gt; equality ( &amp;quot;&amp;amp;&amp;amp;&amp;quot; equality )*
equality       -&amp;gt; comparison ( ( &amp;quot;!=&amp;quot; | &amp;quot;==&amp;quot; ) comparison )*
comparison     -&amp;gt; term ( ( &amp;quot;&amp;gt;&amp;quot; | &amp;quot;&amp;gt;=&amp;quot; | &amp;quot;&amp;lt;&amp;quot; | &amp;quot;&amp;lt;=&amp;quot; ) term )*
term           -&amp;gt; factor ( ( &amp;quot;-&amp;quot; | &amp;quot;+&amp;quot; ) factor )*
factor         -&amp;gt; unary ( ( &amp;quot;&#x2F;&amp;quot; | &amp;quot;*&amp;quot; ) unary )*

unary          -&amp;gt; ( &amp;quot;!&amp;quot; | &amp;quot;-&amp;quot; ) unary | call 
call           -&amp;gt; primary ( &amp;quot;(&amp;quot; exprl &amp;quot;)&amp;quot; | &amp;quot;.&amp;quot; identifier )* 
primary        -&amp;gt; &amp;quot;true&amp;quot; 
                | &amp;quot;false&amp;quot; 
                | &amp;quot;none&amp;quot; 
                | &amp;quot;this&amp;quot;
                | number 
                | string 
                | char
                | identifier 
                | &amp;quot;(&amp;quot; expression &amp;quot;)&amp;quot;
                | &amp;quot;super&amp;quot; &amp;quot;.&amp;quot; identifier 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;access&quot;&gt;Access&lt;&#x2F;h2&gt;
&lt;p&gt;Access modifiers are used to prohibit certain parts of code from being seen outside the &amp;quot;inner&amp;quot; scope of the instantiater. They may be applied to classes, enums, and functions.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Access Mode&lt;&#x2F;th&gt;&lt;th&gt;Short Name&lt;&#x2F;th&gt;&lt;th&gt;Effect&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Public&lt;&#x2F;td&gt;&lt;td&gt;pub&lt;&#x2F;td&gt;&lt;td&gt;Any outer scope can see the declaration&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Protected&lt;&#x2F;td&gt;&lt;td&gt;prot&lt;&#x2F;td&gt;&lt;td&gt;Only outer scopes which are a subtype can see the declaration&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Private&lt;&#x2F;td&gt;&lt;td&gt;priv&lt;&#x2F;td&gt;&lt;td&gt;No outer scopes can see the declaration&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;pre data-lang=&quot;ebnf&quot; class=&quot;language-ebnf z-code&quot;&gt;&lt;code class=&quot;language-ebnf&quot; data-lang=&quot;ebnf&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;amod           -&amp;gt; pub
                | prot
                | priv

pub            -&amp;gt; &amp;quot;pub&amp;quot; | &amp;quot;public&amp;quot;
prot           -&amp;gt; &amp;quot;prot&amp;quot; | &amp;quot;protected&amp;quot;
priv           -&amp;gt; &amp;quot;priv&amp;quot; | &amp;quot;private&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;instantiation-modifier&quot;&gt;Instantiation Modifier&lt;&#x2F;h2&gt;
&lt;p&gt;the &lt;code&gt;abstract&lt;&#x2F;code&gt; keyword can be used to prohibit instantiation of a class&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ebnf&quot; class=&quot;language-ebnf z-code&quot;&gt;&lt;code class=&quot;language-ebnf&quot; data-lang=&quot;ebnf&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;abstract       -&amp;gt; &amp;quot;abstract&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;&#x2F;h2&gt;
&lt;p&gt;Functions and anonymous functions;
overloading is done with &lt;code&gt;A.SomeFunc()&lt;&#x2F;code&gt; where &lt;code&gt;A&lt;&#x2F;code&gt; is the super class.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ebnf&quot; class=&quot;language-ebnf z-code&quot;&gt;&lt;code class=&quot;language-ebnf&quot; data-lang=&quot;ebnf&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;anonFunc       -&amp;gt; &amp;quot;(&amp;quot; identifierl &amp;quot;)&amp;quot; &amp;quot;-&amp;gt;&amp;quot; block
fn             -&amp;gt; &amp;quot;fn&amp;quot; (identifier &amp;quot;.&amp;quot;)? identifier (&amp;quot;&amp;lt;&amp;quot; identifierl &amp;quot;&amp;gt;&amp;quot;)? &amp;quot;(&amp;quot; fnDeclArgl &amp;quot;)&amp;quot; &amp;quot;-&amp;gt;&amp;quot; block
fnDeclArg          -&amp;gt; type &amp;quot;:&amp;quot; identifier
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;types-literals&quot;&gt;Types Literals&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ebnf&quot; class=&quot;language-ebnf z-code&quot;&gt;&lt;code class=&quot;language-ebnf&quot; data-lang=&quot;ebnf&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;stype          -&amp;gt; identifier
atype          -&amp;gt; type &amp;quot;[]&amp;quot;
gtype          -&amp;gt; identifier &amp;quot;&amp;lt;&amp;quot; identfierl &amp;quot;&amp;gt;&amp;quot;
otype          -&amp;gt; type &amp;quot;?&amp;quot;
type           -&amp;gt; stype 
                | atype 
                | gtype
                | otype
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;utilities-lists&quot;&gt;Utilities &#x2F; Lists&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ebnf&quot; class=&quot;language-ebnf z-code&quot;&gt;&lt;code class=&quot;language-ebnf&quot; data-lang=&quot;ebnf&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;typel           -&amp;gt; (type &amp;quot;,&amp;quot;)* type &amp;quot;,&amp;quot;? 

identfierl      -&amp;gt; (identifier &amp;quot;,&amp;quot;)* type &amp;quot;,&amp;quot;?

namespacel      -&amp;gt; (namespace &amp;quot;,&amp;quot;)* namespace &amp;quot;,&amp;quot;?

fnDeclArgl      -&amp;gt; (fnArg &amp;quot;,&amp;quot;)* fnArg &amp;quot;,&amp;quot;?

variantl        -&amp;gt; (varriant &amp;quot;,&amp;quot;)* variant &amp;quot;,&amp;quot;?

exprl           -&amp;gt; (expression &amp;quot;,&amp;quot;)* expression &amp;quot;,&amp;quot;?

inheritl        -&amp;gt; (inherit &amp;quot;,&amp;quot;)* inherit &amp;quot;,&amp;quot;?
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;The parser is work in progress, and you can check on the progress at &lt;a href=&quot;https:&#x2F;&#x2F;syst3mz.github.io&#x2F;lalr-generator&#x2F;&quot;&gt;LALR parser generator&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Astrophotography</title>
		<published>2022-01-16T00:00:00+00:00</published>
		<updated>2022-01-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://syst3mz.github.io/astrophotography/" type="text/html"/>
		<id>https://syst3mz.github.io/astrophotography/</id>
		<content type="html">&lt;p&gt;Astrophotography is the art of taking images of space. I find it to be a relaxing and very enjoyable way to give people a glimpse into the stars without requiring them to come out to a telescope (but they totally should).&lt;&#x2F;p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
             
&lt;img src=&quot;..&#x2F;imgs&#x2F;Moonshot.bmp&quot; alt=&quot;A zoomed in section of the moon at the edge between light and dark&quot; width=&quot;600&quot; height=&quot;400&quot; &#x2F;&gt;

        &lt;td&gt;
        &lt;td&gt;
             
&lt;img src=&quot;..&#x2F;imgs&#x2F;moon II.bmp&quot; alt=&quot;Wider field view of the moon, which is colorized by chromatic aberration&quot; width=&quot;600&quot; height=&quot;400&quot; &#x2F;&gt;

        &lt;&#x2F;td&gt;
    &lt;&#x2F;tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot; style=&quot;text-align: center&quot;&gt;Both images taken by me!&lt;&#x2F;td&gt;
    &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;h2 id=&quot;what-are-deep-sky-objects&quot;&gt;What are Deep Sky Objects?&lt;&#x2F;h2&gt;
&lt;p&gt;Deep Sky Objects (DSO) are celestial bodies that are particularly far away or dim. These are often things like nebulae and galaxies. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-don-t-you-image-them-they-look-the-coolest&quot;&gt;Why don&#x27;t you image them, they look the coolest?&lt;&#x2F;h2&gt;
&lt;p&gt;I am working on it; however due to how dim DSOs are, you need the ability to track their positions very precisely to allow more particles of light to reach the camera&#x27;s sensor. Soon I will upgrade my telescope with this capability, but I&#x27;m not there yet.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
